/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import database.facility.DBRequest;
import java.awt.HeadlessException;
import java.text.DateFormat;
import java.util.Hashtable;
import java.sql.Date;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import javafx.scene.control.TableColumnBase;

/**
 *
 * @author jona1993
 */
public class UpdateDB extends javax.swing.JFrame {
    public static int INSERT = 1;
    public static int UPDATE = 2;
    private String Table;
    private int Action;
    private DBRequest request;
    private JDBCTester Win;
    /**
     * Creates new form UpdateDB
     */
    
    
    public UpdateDB() {
        initComponents();
        
    }

    public UpdateDB(String table, int action, DBRequest req, JDBCTester win) {
        initComponents();
        
        request = req;
        Win = win;
        Table = table;
        Action = action;
        
        if(Action == INSERT)
        {
            ConditionsTF.setVisible(false);
            ConditionsLabel.setVisible(false);
        }
        
        switch(table)
        {
            case "VOYAGEURS":
                T1Label.setText("numclient: ");
                T2Label.setText("referent: ");
                T3Label.setText("nom: ");
                T4Label.setText("prenom: ");
                T5Label.setText("adresse: ");
                T6Label.setText("codepostal: ");
                T7Label.setText("localite: ");
                T8Label.setText("datenaissance: ");
                T9Label.setText("nationnalite: ");
                T10Label.setText("email: ");
                break;
            case "CHAMBRES":
                T1Label.setText("numero: ");
                T2Label.setText("Ã©quipement: ");
                T3Label.setText("nboccupants: ");
                T4Label.setText("prixHTVA: ");
                T5Label.setVisible(false);
                T5TF.setVisible(false);
                T6Label.setVisible(false);
                T6TF.setVisible(false);
                T7Label.setVisible(false);
                T7TF.setVisible(false);
                T8Label.setVisible(false);
                T8TF.setVisible(false);
                T9Label.setVisible(false);
                T9TF.setVisible(false);
                T10Label.setVisible(false);
                T10TF.setVisible(false);
                break;
            case "ACTIVITES":
                T1Label.setText("id: ");
                T2Label.setText("type: ");
                T3Label.setText("nbmaxparticipants: ");
                T4Label.setText("duree: ");
                T5Label.setText("prixHTVA: ");
                T6Label.setVisible(false);
                T6TF.setVisible(false);
                T7Label.setVisible(false);
                T7TF.setVisible(false);
                T8Label.setVisible(false);
                T8TF.setVisible(false);
                T9Label.setVisible(false);
                T9TF.setVisible(false);
                T10Label.setVisible(false);
                T10TF.setVisible(false);
                break;
            case "RESERVATIONS":
                T1Label.setText("id: ");
                T2Label.setText("voyageurtitulaire: ");
                T3Label.setText("reservation: ");
                T4Label.setText("datedebut: ");
                T5Label.setText("datefin: ");
                T6Label.setText("prixnet: ");
                T7Label.setText("paye: ");
                T8Label.setVisible(false);
                T8TF.setVisible(false);
                T9Label.setVisible(false);
                T9TF.setVisible(false);
                T10Label.setVisible(false);
                T10TF.setVisible(false);
                break;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        T1Label = new javax.swing.JLabel();
        T2Label = new javax.swing.JLabel();
        T3Label = new javax.swing.JLabel();
        T4Label = new javax.swing.JLabel();
        T5Label = new javax.swing.JLabel();
        T6Label = new javax.swing.JLabel();
        T7Label = new javax.swing.JLabel();
        T8Label = new javax.swing.JLabel();
        T9Label = new javax.swing.JLabel();
        T10Label = new javax.swing.JLabel();
        T1TF = new javax.swing.JTextField();
        T2TF = new javax.swing.JTextField();
        T3TF = new javax.swing.JTextField();
        T4TF = new javax.swing.JTextField();
        T5TF = new javax.swing.JTextField();
        T6TF = new javax.swing.JTextField();
        T7TF = new javax.swing.JTextField();
        T8TF = new javax.swing.JTextField();
        T9TF = new javax.swing.JTextField();
        T10TF = new javax.swing.JTextField();
        CancelButton = new javax.swing.JButton();
        SendButton = new javax.swing.JButton();
        ConditionsLabel = new javax.swing.JLabel();
        ConditionsTF = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        T1Label.setText("jLabel1");

        T2Label.setText("jLabel1");

        T3Label.setText("jLabel1");

        T4Label.setText("jLabel1");

        T5Label.setText("jLabel1");

        T6Label.setText("jLabel1");

        T7Label.setText("jLabel1");

        T8Label.setText("jLabel1");

        T9Label.setText("jLabel1");

        T10Label.setText("jLabel1");

        T1TF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T1TFActionPerformed(evt);
            }
        });

        T7TF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T7TFActionPerformed(evt);
            }
        });

        CancelButton.setText("Cancel");
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonActionPerformed(evt);
            }
        });

        SendButton.setText("Send");
        SendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendButtonActionPerformed(evt);
            }
        });

        ConditionsLabel.setText("Conditions: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(153, 153, 153)
                        .addComponent(CancelButton)
                        .addGap(87, 87, 87)
                        .addComponent(SendButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(T5Label)
                            .addComponent(T4Label)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(T1Label)
                                    .addGap(42, 42, 42)
                                    .addComponent(T1TF, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(T2Label)
                                        .addComponent(T3Label))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(T2TF, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                                        .addComponent(T4TF)
                                        .addComponent(T3TF)
                                        .addComponent(T5TF)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(T6Label)
                            .addComponent(T7Label)
                            .addComponent(T10Label)
                            .addComponent(T9Label)
                            .addComponent(T8Label))
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(T6TF, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                            .addComponent(T7TF)
                            .addComponent(T8TF)
                            .addComponent(T9TF)
                            .addComponent(T10TF))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(172, 172, 172)
                .addComponent(ConditionsLabel)
                .addGap(32, 32, 32)
                .addComponent(ConditionsTF, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 188, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(T1Label)
                    .addComponent(T6Label)
                    .addComponent(T1TF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(T6TF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(T2Label)
                    .addComponent(T7Label)
                    .addComponent(T2TF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(T7TF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(T3Label)
                    .addComponent(T8Label)
                    .addComponent(T3TF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(T8TF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(T4Label)
                    .addComponent(T9Label)
                    .addComponent(T4TF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(T9TF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(T5Label)
                    .addComponent(T10Label)
                    .addComponent(T5TF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(T10TF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConditionsLabel)
                    .addComponent(ConditionsTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SendButton)
                    .addComponent(CancelButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelButtonActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_CancelButtonActionPerformed

    private void SendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendButtonActionPerformed
        // TODO add your handling code here:
        Hashtable<Integer, Object> hash = new Hashtable<Integer, Object>();
        String columns = "";
        int i = 0;
        try
        {
            if(Action == INSERT)
            {
                switch(Table)
                {
                    case "VOYAGEURS":
                        columns += ", numclient";
                        if(T1TF.getText().length() != 0) {
                            hash.put(i++, Integer.parseInt(T1TF.getText()));
                        }
                        else
                            hash.put(i++, "NULL");

                        columns += ", referent";
                        if(T2TF.getText().length() != 0) {
                            hash.put(i++, Integer.parseInt(T2TF.getText()));
                        }
                        else
                            hash.put(i++, "NULL");

                        columns += ", nom";
                        if(T3TF.getText().length() != 0) {
                            hash.put(i++, T3TF.getText());
                        }
                        else
                            hash.put(i++, "NULL");

                        columns += ", prenom";
                        if(T4TF.getText().length() != 0) {
                            hash.put(i++, T4TF.getText());
                        }
                        else
                            hash.put(i++, "NULL");

                        columns += ", adresse";
                        if(T5TF.getText().length() != 0) {
                            hash.put(i++, T5TF.getText());
                        }
                        else
                            hash.put(i++, "NULL");

                        columns += ", codepostal";
                        if(T6TF.getText().length() != 0) {
                            hash.put(i++, Integer.parseInt(T6TF.getText()));
                        }
                        else
                            hash.put(i++, "NULL");

                        columns += ", localite";
                        if(T7TF.getText().length() != 0) {
                            hash.put(i++, T7TF.getText());
                        }
                        else
                            hash.put(i++, "NULL");

                        columns += ", datenaissance";
                        if(T8TF.getText().length() != 0) {
                            DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                            Date d = new Date(df.parse(T8TF.getText()).getTime()); //util.Date to sql.Date
                            hash.put(i++, d);
                        }
                        else
                            hash.put(i++, "NULL");

                        columns += ", nationnalite";
                        if(T9TF.getText().length() != 0) {
                            hash.put(i++, T9TF.getText());
                        }
                        else
                            hash.put(i++, "NULL");

                        columns += ", email";
                        if(T10TF.getText().length() != 0) {
                            hash.put(i++, T10TF.getText());
                        }
                        else
                            hash.put(i++, "NULL");

                        columns = columns.substring(1, columns.length());


                        break;
                    case "CHAMBRES":
                        columns += ", numero";
                        if(T1TF.getText().length() != 0) {
                            hash.put(i++, Integer.parseInt(T1TF.getText()));
                        }
                        else
                            hash.put(i++, "NULL");

                         columns += ", Ã©quipement";
                        if(T2TF.getText().length() != 0) {
                            hash.put(i++, T2TF.getText());
                        }
                        else
                            hash.put(i++, "NULL");

                         columns += ", nboccupants";
                        if(T3TF.getText().length() != 0) {
                            hash.put(i++, Integer.parseInt(T3TF.getText()));
                        }
                        else
                            hash.put(i++, "NULL");

                         columns += ", prixHTVA";
                        if(T4TF.getText().length() != 0) {
                            hash.put(i++, Integer.parseInt(T4TF.getText()));
                        }
                        else
                            hash.put(i++, "NULL");

                        columns = columns.substring(1, columns.length());
                        break;
                    case "ACTIVITES":
                        columns += ", id";
                        if(T1TF.getText().length() != 0) {
                            hash.put(i++, Integer.parseInt(T1TF.getText()));
                        }
                        else
                            hash.put(i++, "NULL");

                        columns += ", type";
                        if(T2TF.getText().length() != 0) {
                            hash.put(i++, T2TF.getText());
                        }
                        else
                            hash.put(i++, "NULL");

                        columns += ", nbmaxparticipants";
                        if(T3TF.getText().length() != 0) {
                            hash.put(i++, Integer.parseInt(T3TF.getText()));
                        }
                        else
                            hash.put(i++, "NULL");

                        columns += ", duree";
                        if(T4TF.getText().length() != 0) {
                            hash.put(i++, Integer.parseInt(T4TF.getText()));
                        }
                        else
                            hash.put(i++, "NULL");

                        columns += ", prixHTVA";
                        if(T5TF.getText().length() != 0) {
                            hash.put(i++, Integer.parseInt(T5TF.getText()));
                        }
                        else
                            hash.put(i++, "NULL");

                        columns = columns.substring(1, columns.length());

                        break;
                    case "RESERVATIONS":
                        columns += ", id";
                        if(T1TF.getText().length() != 0) {
                            hash.put(i++, T1TF.getText());
                        }
                        else
                            hash.put(i++, "NULL");

                        columns += ", voyageurtitulaire";
                        if(T2TF.getText().length() != 0) {
                            hash.put(i++, Integer.parseInt(T2TF.getText()));
                        }
                        else
                            hash.put(i++, "NULL");

                        columns += ", reservation";
                        if(T3TF.getText().length() != 0) {
                            hash.put(i++, Integer.parseInt(T3TF.getText()));
                        }
                        else
                            hash.put(i++, "NULL");

                        columns += ", datedebut";
                        if(T4TF.getText().length() != 0) {
                            DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                            Date d = new Date(df.parse(T4TF.getText()).getTime()); //util.Date to sql.Date
                            hash.put(i++, d);
                        }
                        else
                            hash.put(i++, "NULL");

                        columns += ", datefin";
                        if(T5TF.getText().length() != 0) {
                            DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                            Date d = new Date(df.parse(T5TF.getText()).getTime()); //util.Date to sql.Date
                            hash.put(i++, d);
                        }
                        else
                            hash.put(i++, "NULL");

                        columns += ", prixnet";
                        if(T6TF.getText().length() != 0) {
                            hash.put(i++, Integer.parseInt(T6TF.getText()));
                        }
                        else
                            hash.put(i++, "NULL");

                        columns += ", paye";
                        if(T7TF.getText().length() != 0) {
                            hash.put(i++, Boolean.parseBoolean(T7TF.getText()));
                        }
                        else
                            hash.put(i++, "NULL");

                        columns = columns.substring(1, columns.length());
                        break;
                }
                request.InsertTable(columns, Table ,hash);

                Win.LogTASnd.append("info: Ligne ajoutÃ©e !\n");
            }
            else
            {
                switch(Table)
                {
                    case "VOYAGEURS":
                        
                        if(T1TF.getText().length() != 0) {
                            columns += ", numclient";
                            hash.put(i++, Integer.parseInt(T1TF.getText()));
                        }

                        
                        if(T2TF.getText().length() != 0) {
                            columns += ", referent";
                            hash.put(i++, Integer.parseInt(T2TF.getText()));
                        }

                        
                        if(T3TF.getText().length() != 0) {
                            columns += ", nom";
                            hash.put(i++, T3TF.getText());
                        }

                        
                        if(T4TF.getText().length() != 0) {
                            columns += ", prenom";
                            hash.put(i++, T4TF.getText());
                        }

                        
                        if(T5TF.getText().length() != 0) {
                            columns += ", adresse";
                            hash.put(i++, T5TF.getText());
                        }

                        
                        if(T6TF.getText().length() != 0) {
                            columns += ", codepostal";
                            hash.put(i++, Integer.parseInt(T6TF.getText()));
                        }

                        
                        if(T7TF.getText().length() != 0) {
                            columns += ", localite";
                            hash.put(i++, T7TF.getText());
                        }

                        
                        if(T8TF.getText().length() != 0) {
                            columns += ", datenaissance";
                            DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                            Date d = new Date(df.parse(T8TF.getText()).getTime()); //util.Date to sql.Date
                            hash.put(i++, d);
                        }

                        
                        if(T9TF.getText().length() != 0) {
                            columns += ", nationnalite";
                            hash.put(i++, T9TF.getText());
                        }

                        
                        if(T10TF.getText().length() != 0) {
                            columns += ", email";
                            hash.put(i++, T10TF.getText());
                        }

                        columns = columns.substring(1, columns.length());

                        break;
                    case "CHAMBRES":
                        
                        if(T1TF.getText().length() != 0) {
                            columns += ", numero";
                            hash.put(i++, Integer.parseInt(T1TF.getText()));
                        }
                        

                         
                        if(T2TF.getText().length() != 0) {
                            columns += ", Ã©quipement";
                            hash.put(i++, T2TF.getText());
                        }

                         
                        if(T3TF.getText().length() != 0) {
                            columns += ", nboccupants";
                            hash.put(i++, Integer.parseInt(T3TF.getText()));
                        }

                         
                        if(T4TF.getText().length() != 0) {
                            columns += ", prixHTVA";
                            hash.put(i++, Integer.parseInt(T4TF.getText()));
                        }

                        columns = columns.substring(1, columns.length());
                      
                        break;
                    case "ACTIVITES":
                        
                        if(T1TF.getText().length() != 0) {
                            columns += ", id";
                            hash.put(i++, Integer.parseInt(T1TF.getText()));
                        }

                        
                        if(T2TF.getText().length() != 0) {
                            columns += ", type";
                            hash.put(i++, T2TF.getText());
                        }

                        
                        if(T3TF.getText().length() != 0) {
                            columns += ", nbmaxparticipants";
                            hash.put(i++, Integer.parseInt(T3TF.getText()));
                        }

                        
                        if(T4TF.getText().length() != 0) {
                            columns += ", duree";
                            hash.put(i++, Integer.parseInt(T4TF.getText()));
                        }

                        
                        if(T5TF.getText().length() != 0) {
                            columns += ", prixHTVA";
                            hash.put(i++, Integer.parseInt(T5TF.getText()));
                        }

                        columns = columns.substring(1, columns.length());

                        break;
                    case "RESERVATIONS":
                        
                        if(T1TF.getText().length() != 0) {
                            columns += ", id";
                            hash.put(i++, T1TF.getText());
                        }

                        
                        if(T2TF.getText().length() != 0) {
                            columns += ", voyageurtitulaire";
                            hash.put(i++, Integer.parseInt(T2TF.getText()));
                        }

                        
                        if(T3TF.getText().length() != 0) {
                            columns += ", reservation";
                            hash.put(i++, Integer.parseInt(T3TF.getText()));
                        }

                        
                        if(T4TF.getText().length() != 0) {
                            columns += ", datedebut";
                            DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                            Date d = new Date(df.parse(T4TF.getText()).getTime()); //util.Date to sql.Date
                            hash.put(i++, d);
                        }

                        
                        if(T5TF.getText().length() != 0) {
                            columns += ", datefin";
                            DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                            Date d = new Date(df.parse(T5TF.getText()).getTime()); //util.Date to sql.Date
                            hash.put(i++, d);
                        }

                        
                        if(T6TF.getText().length() != 0) {
                            columns += ", prixnet";
                            hash.put(i++, Integer.parseInt(T6TF.getText()));
                        }

                        
                        if(T7TF.getText().length() != 0) {
                            columns += ", paye";
                            hash.put(i++, Boolean.parseBoolean(T7TF.getText()));
                        }

                        columns = columns.substring(1, columns.length());
                        break;
                }
                request.UpdateTable(columns, Table, hash, ConditionsTF.getText()); // En vrai, la condition aura la forme: id = ? and nom = ?, ... et on ajoutera les Ã©lÃ©ments Ã  la hashtable
                Win.LogTASnd.append("info: Table mise Ã  jour !\n");
            }
        }
        catch(NumberFormatException e)
        {
            Win.LogTASnd.append("err: " + e.getMessage() + "\n");
        }
        catch(ParseException e)
        {
            Win.LogTASnd.append("err: " + e.getMessage() + "\n");
        }
        catch(SQLException e)
        {
            try {
                    request.getConnection().getConnection().rollback();
                } catch (SQLException ex) {
                    Win.LogTASnd.append("err: " + ex.getMessage() + "\n");
                }
            
            Win.LogTASnd.append("err: " + e.getMessage() + "\n");
        }
        
        dispose();
    }//GEN-LAST:event_SendButtonActionPerformed

    private void T7TFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T7TFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_T7TFActionPerformed

    private void T1TFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T1TFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_T1TFActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdateDB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdateDB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdateDB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateDB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UpdateDB().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CancelButton;
    private javax.swing.JLabel ConditionsLabel;
    private javax.swing.JTextField ConditionsTF;
    private javax.swing.JButton SendButton;
    private javax.swing.JLabel T10Label;
    private javax.swing.JTextField T10TF;
    private javax.swing.JLabel T1Label;
    private javax.swing.JTextField T1TF;
    private javax.swing.JLabel T2Label;
    private javax.swing.JTextField T2TF;
    private javax.swing.JLabel T3Label;
    private javax.swing.JTextField T3TF;
    private javax.swing.JLabel T4Label;
    private javax.swing.JTextField T4TF;
    private javax.swing.JLabel T5Label;
    private javax.swing.JTextField T5TF;
    private javax.swing.JLabel T6Label;
    private javax.swing.JTextField T6TF;
    private javax.swing.JLabel T7Label;
    private javax.swing.JTextField T7TF;
    private javax.swing.JLabel T8Label;
    private javax.swing.JTextField T8TF;
    private javax.swing.JLabel T9Label;
    private javax.swing.JTextField T9TF;
    // End of variables declaration//GEN-END:variables
}
