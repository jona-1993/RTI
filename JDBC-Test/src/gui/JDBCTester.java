/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import database.facility.DBRequest;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Hashtable;
import java.util.Properties;
import javax.swing.JTextArea;

/**
 *
 * @author jona1993
 */
public class JDBCTester extends javax.swing.JFrame {
    private DBRequest request = null;
    private ResultSet result = null;
    private Hashtable<String, String> hash;
    public JTextArea LogTASnd;
    /**
     * Creates new form JDBCTester
     */
    public JDBCTester() {
        initComponents();
        
        LogTASnd = LogTA;
        Properties prop = new Properties();
        InputStream in = null;
        
        ActionCB.setVisible(false);
        TableCB.setVisible(false);
        ConditionsLabel.setVisible(false);
        ConditionsTF.setVisible(false);
        
        hash = new Hashtable<String, String>();
        
        try
        {
            in = new FileInputStream("settings.properties");
            
            prop.load(in);
            
            hash.put("IPMySQLServer", prop.getProperty("IPMySQLServer"));
            hash.put("PortMySQLServer", prop.getProperty("PortMySQLServer"));
            hash.put("IDMySQL", prop.getProperty("IDMySQL"));
            hash.put("PWDMySQL", prop.getProperty("PWDMySQL"));
            
            
            hash.put("IPOracleServer", prop.getProperty("IPOracleServer"));
            hash.put("PortOracleServer", prop.getProperty("PortOracleServer"));
            hash.put("IDOracle", prop.getProperty("IDOracle"));
            hash.put("PWDOracle", prop.getProperty("PWDOracle"));
        }
        catch(IOException e)
        {
            LogTA.append("err: " + e.getMessage() + "\n");
        }
        finally
        {
            if(in != null)
                try {
                    in.close();
            } catch (IOException ex) {
                LogTA.append("err: " + ex.getMessage() + "\n");
            }
        }
        
        /*try 
        {
            request = new DBRequest("jdbc:mysql://" + hash.get("IPMySQLServer") + ":" + hash.get("PortMySQLServer") + "/BD_HOLIDAYS?serverTimezone=UTC", hash.get("IDMySQL"), hash.get("PWDMySQL"));
            LogTA.append("info: Vous êtes connecté à MySQL!\n");
        } 
        catch (ClassNotFoundException ex) 
        {
            LogTA.append("err: " + ex.getMessage() + "\n");
        } 
        catch (SQLException ex) 
        {
            LogTA.append("err: " + ex.getMessage() + "\n");
        }*/
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        DBCB = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        LogTA = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        RequestCB = new javax.swing.JComboBox<>();
        RequestTF = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        SendButton = new javax.swing.JButton();
        ActionCB = new javax.swing.JComboBox<>();
        TableCB = new javax.swing.JComboBox<>();
        ConditionsLabel = new javax.swing.JLabel();
        ConditionsTF = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setText("Database:");

        DBCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MySQL", "Oracle" }));
        DBCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DBCBActionPerformed(evt);
            }
        });

        LogTA.setColumns(20);
        LogTA.setRows(5);
        jScrollPane1.setViewportView(LogTA);

        jLabel2.setText("Requête: ");

        RequestCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Requête Libre", "Requête Prepared" }));
        RequestCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RequestCBActionPerformed(evt);
            }
        });

        RequestTF.setText("select * from VOYAGEURS");

        jLabel3.setText("Sortie:");

        SendButton.setText("Send");
        SendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendButtonActionPerformed(evt);
            }
        });

        ActionCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choix Action", "INSERT", "UPDATE", "DELETE", "SELECT", "COUNT" }));
        ActionCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActionCBActionPerformed(evt);
            }
        });

        TableCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choix Table", "VOYAGEURS", "ACTIVITES", "CHAMBRES", "RESERVATIONS" }));
        TableCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TableCBActionPerformed(evt);
            }
        });

        ConditionsLabel.setText("Conditions: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 532, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(DBCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(RequestCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(SendButton))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(RequestTF)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(ConditionsLabel)
                                        .addComponent(ActionCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(31, 31, 31)
                                            .addComponent(TableCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(ConditionsTF)))
                                    .addGap(0, 0, Short.MAX_VALUE)))))
                    .addComponent(jLabel3))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(DBCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(RequestCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RequestTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SendButton)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ActionCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(TableCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(ConditionsLabel)
                    .addComponent(ConditionsTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DBCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DBCBActionPerformed
        // TODO add your handling code here:
        try
        {
            if(request != null)
                request.Close();
            
            switch(DBCB.getSelectedItem().toString())
            {
                case "MySQL":
                    request = new DBRequest("jdbc:mysql://" + hash.get("IPMySQLServer") + ":" + hash.get("PortMySQLServer") + "/BD_HOLIDAYS?serverTimezone=UTC", hash.get("IDMySQL"), hash.get("PWDMySQL"));
                    break;
                case "Oracle":
                    request = new DBRequest("jdbc:oracle:thin:@" + hash.get("IPOracleServer") + ":" + hash.get("PortOracleServer") + "/orcl", hash.get("IDOracle"), hash.get("PWDOracle"));
                    break;
            }
            
            LogTA.append("info: Vous êtes connecté à " + DBCB.getSelectedItem().toString() + "!\n");
        }
        catch(SQLException e){
           LogTA.append("err: " + e.getMessage() + "\n");
        }
        catch(ClassNotFoundException e){
           LogTA.append("err: " + e.getMessage() + "\n");
        }
    }//GEN-LAST:event_DBCBActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            // TODO add your handling code here:
            request.Close();
        } catch (Exception ex) {
            System.err.println("request est null..");
        }
        
    }//GEN-LAST:event_formWindowClosing

    private void SendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendButtonActionPerformed
        // TODO add your handling code here:
        if(RequestCB.getSelectedItem().toString().compareTo("Requête Libre") == 0)
        {
            try
            {
                result = request.SendSimpleRequest(RequestTF.getText());
                LogTA.append("info: Requête envoyée\n");
                
                ResultSetMetaData resultmd = result.getMetaData();
                
                int columnCount = resultmd.getColumnCount();
               
                for(int i = 1; i < columnCount; i+=1)
                {
                    LogTA.append(resultmd.getColumnName(i) + " | ");
                }
                
                LogTA.append("\n");
                
                while(result.next()){
                    for(int i = 1; i < columnCount; i+=1)
                    {
                        if(result.getObject(i) == null)
                            LogTA.append("NULL | ");
                        else
                            LogTA.append(result.getObject(i).toString() + " | ");
                    }
                    LogTA.append("\n");
                }
            }
            catch(SQLException e)
            {
                LogTA.append("err: " + e.getMessage() + "\n");
            }
        }
        else if(ActionCB.getSelectedItem().toString().compareTo("DELETE") == 0)
        {
            try
            {
                request.DropTable(TableCB.getSelectedItem().toString(), new Hashtable<Integer, Object>(), ConditionsTF.getText());
                LogTA.append("info: Ligne supprimée\n");
            }
            catch(SQLException e)
            {
                try {
                    request.getConnection().getConnection().rollback();
                } catch (SQLException ex) {
                    LogTA.append("err: " + ex.getMessage() + "\n");
                }
                
                LogTA.append("err: " + e.getMessage() + "\n");
            }
        }
        else if(ActionCB.getSelectedItem().toString().compareTo("SELECT") == 0)
        {
            try
            {
                result = request.SelectTable(TableCB.getSelectedItem().toString(), "*", ConditionsTF.getText(), new Hashtable<Integer, Object>());
                
                LogTA.append("info: Requête envoyée\n");
                
                ResultSetMetaData resultmd = result.getMetaData();
                
                int columnCount = resultmd.getColumnCount() + 1;
               
                for(int i = 1; i < columnCount; i+=1)
                {
                    LogTA.append(resultmd.getColumnName(i) + " | ");
                }
                LogTA.append("\n");
                while(result.next()){
                    for(int i = 1; i < columnCount; i+=1)
                    {
                        if(result.getObject(i) == null)
                            LogTA.append("NULL | ");
                        else
                            LogTA.append(result.getObject(i).toString() + " | ");
                    }
                    LogTA.append("\n");
                }
            }
            catch(SQLException e)
            {
                LogTA.append("err: " + e.getMessage() + "\n");
            }
        }
            
        
        
    }//GEN-LAST:event_SendButtonActionPerformed

    private void RequestCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RequestCBActionPerformed
        // TODO add your handling code here:
        if(RequestCB.getSelectedItem().toString().compareTo("Requête Libre") == 0)
        {
            ActionCB.setVisible(false);
            TableCB.setVisible(false);
            RequestTF.setVisible(true);
        }
        else
        {
            ActionCB.setVisible(true);
            RequestTF.setVisible(false);
        }
    }//GEN-LAST:event_RequestCBActionPerformed

    private void ActionCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActionCBActionPerformed
        // TODO add your handling code here:
        if(RequestCB.getSelectedItem().toString().compareTo("Choix Action") != 0)
        {
            TableCB.setVisible(true);
        }
        else
        {
            TableCB.setVisible(false);
        }
    }//GEN-LAST:event_ActionCBActionPerformed

    private void TableCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TableCBActionPerformed
        // TODO add your handling code here:
        UpdateDB win;
        if(TableCB.getSelectedItem().toString().compareTo("Choix Table") != 0)
        {
            switch(ActionCB.getSelectedItem().toString())
            {
                case "INSERT": win = new UpdateDB(TableCB.getSelectedItem().toString(), UpdateDB.INSERT, request, this);
                            win.setVisible(true);
                            break;
                case "UPDATE": win = new UpdateDB(TableCB.getSelectedItem().toString(), UpdateDB.UPDATE, request, this);
                            win.setVisible(true);
                            break;
                case "DELETE": 
                case "SELECT":
                            ConditionsLabel.setVisible(true);
                            ConditionsTF.setVisible(true);
                            break;
                case "COUNT":
                ResultSet result;
                ResultSetMetaData mdresult;
                try 
                {
                    result = request.SelectTable(TableCB.getSelectedItem().toString(), "count(*)", "", new Hashtable<Integer, Object>());
                    mdresult = result.getMetaData();
                    int ncol = mdresult.getColumnCount();
                    LogTA.append(mdresult.getColumnName(1) + "\n");
                    if(result.next())
                    {
                        LogTA.append(result.getShort(1) + "\n");
                    }
                }   catch (SQLException ex) {
                        LogTA.append(ex.getMessage() + "\n");
                    }
            
            }
        }
    }//GEN-LAST:event_TableCBActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JDBCTester.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JDBCTester.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JDBCTester.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JDBCTester.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JDBCTester().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ActionCB;
    private javax.swing.JLabel ConditionsLabel;
    private javax.swing.JTextField ConditionsTF;
    private javax.swing.JComboBox<String> DBCB;
    private javax.swing.JTextArea LogTA;
    private javax.swing.JComboBox<String> RequestCB;
    private javax.swing.JTextField RequestTF;
    private javax.swing.JButton SendButton;
    private javax.swing.JComboBox<String> TableCB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
