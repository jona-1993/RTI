/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;


import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import network.mail.Account;
import javax.mail.*;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import network.mail.ThreadReception;
/**
 *
 * @author jona1993
 */
public class MailClient extends javax.swing.JFrame {

    private ArrayList<Account> comptes;
    private Account selectedAccount;
    private ThreadReception thread = null;
    private Message SelectedMessage = null;
    /**
     * Creates new form MailClient
     */
    public MailClient() {
        initComponents();
        
        
        comptes = new ArrayList<>();
        
        File folder = new File("Data");
        
        File[] AccountFileList = folder.listFiles();
        
        for(int i = 0; i < AccountFileList.length; i+=1){
            if(AccountFileList[i].isFile()) {
                System.out.println("Found: " + AccountFileList[i].getName());
                try
                {
                    DeserializeFile(AccountFileList[i].getName());
                    
                } catch (IOException ex) {
                    Logger.getLogger(MailClient.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(MailClient.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        
        DefaultComboBoxModel model = new DefaultComboBoxModel<String>();
        
        model.addElement("Sélection");
        
        for(Account a: comptes) {
            //ComptesCB.addItem(a.getLibelle());
            model.addElement(a.getLibelle());
        }
        
        ComptesCB.setModel(model);
        
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ComptesCB = new javax.swing.JComboBox<>();
        NewAccountButton = new javax.swing.JButton();
        RefreshButton = new javax.swing.JButton();
        WriteButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        MailTable = new javax.swing.JTable();
        emailLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        MessageTA = new javax.swing.JTextArea();
        DownloadButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Comptes: ");

        jLabel2.setText("Options: ");

        ComptesCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sélection" }));
        ComptesCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComptesCBActionPerformed(evt);
            }
        });

        NewAccountButton.setText("Nouveau compte");
        NewAccountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewAccountButtonActionPerformed(evt);
            }
        });

        RefreshButton.setText("Relever");
        RefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshButtonActionPerformed(evt);
            }
        });

        WriteButton.setText("Ecrire");
        WriteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WriteButtonActionPerformed(evt);
            }
        });

        MailTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        MailTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MailTableMouseClicked(evt);
            }
        });
        MailTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                MailTableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(MailTable);

        emailLabel.setText("jLabel3");

        MessageTA.setColumns(20);
        MessageTA.setRows(5);
        jScrollPane2.setViewportView(MessageTA);

        DownloadButton.setText("Télécharger pièce jointe");
        DownloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DownloadButtonActionPerformed(evt);
            }
        });

        jButton2.setText("Supprimer");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(ComptesCB, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NewAccountButton)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(RefreshButton)
                        .addGap(18, 18, 18)
                        .addComponent(WriteButton))
                    .addComponent(jLabel2)
                    .addComponent(DownloadButton)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jButton2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(emailLabel)
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(RefreshButton)
                            .addComponent(WriteButton)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(emailLabel)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(NewAccountButton)
                        .addGap(12, 12, 12)
                        .addComponent(ComptesCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(DownloadButton)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NewAccountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewAccountButtonActionPerformed
        // TODO add your handling code here:
        NewAccount win = new NewAccount(comptes);
        win.setModal(true);
        win.setVisible(true);
        
        DefaultComboBoxModel model = new DefaultComboBoxModel<String>();
        
        model.addElement("Sélection");
        
        for(Account a: comptes) {
            model.addElement(a.getLibelle());
        }
        
        ComptesCB.setModel(model);
        
    }//GEN-LAST:event_NewAccountButtonActionPerformed

    private void ComptesCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComptesCBActionPerformed
        // TODO add your handling code here:
        selectedAccount = null;
        if(!ComptesCB.getSelectedItem().toString().equals("Sélection")) {
            for(Account a: comptes) {
                if(a.getLibelle().compareTo(ComptesCB.getSelectedItem().toString()) == 0)
                {
                    selectedAccount = a;
                }
            }
        }
        
        if(thread != null)
        {
            try
            {
                thread.Stop();
                thread.interrupt();
            } catch (MessagingException ex) {
                Logger.getLogger(MailClient.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        
        
        thread = new ThreadReception(selectedAccount, MailTable);
        
        thread.start();
        
        emailLabel.setText("Connecté: " + selectedAccount.getAddress());
       
    }//GEN-LAST:event_ComptesCBActionPerformed

    private void WriteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WriteButtonActionPerformed
        // TODO add your handling code here:
        //selectedAccount = comptes.get(1);
        
        if(thread != null)
            synchronized(thread)
            {
                NewMessage win = new NewMessage(selectedAccount);
                win.setModal(true);
                win.setVisible(true);
            }
    }//GEN-LAST:event_WriteButtonActionPerformed

    private void MailTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MailTableMouseClicked
        // TODO add your handling code here:
        Message msgs[];
        
        synchronized(thread)
        {
            msgs = thread.getMessages();
            
            if(msgs != null)
            {
                for(Message m : msgs)
                {
                    if((MailTable.getSelectedRow()+1) == m.getMessageNumber())
                    {
                        SelectedMessage = m;
                    }
                }
                
                if(SelectedMessage != null)
                {
                    
                    MessageTA.setVisible(true);
                    
                    Enumeration e;
                    try {
                        e = SelectedMessage.getAllHeaders();
                    
                        Header h;

                        while(e.hasMoreElements())
                        {
                            h = (Header)e.nextElement();
                            if(h.getName().toLowerCase().contains("from") || h.getName().toLowerCase().contains("to"))
                                System.err.println("NAME = " + h.getName() + " VALEUR = " + h.getValue()); // J'affiche le traçage ici, plus de place pour afficher ..
                        }
                    } catch (MessagingException ex) {
                        Logger.getLogger(MailClient.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    try
                    {
                        if(SelectedMessage.getContent() instanceof Multipart)
                        {
                            Multipart mp = (Multipart) SelectedMessage.getContent();
                            for(int i = 0; i < mp.getCount(); i+=1){

                                try {
                                    if(mp.getBodyPart(i).isMimeType("text/plain"))
                                    {
                                        MessageTA.setText((String)mp.getBodyPart(i).getContent());
                                    }
                                } catch (MessagingException ex) {
                                    Logger.getLogger(MailClient.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }
                        else
                        {
                            MessageTA.setText((String)SelectedMessage.getContent());
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(MailClient.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (MessagingException ex) {
                        Logger.getLogger(MailClient.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
        
        
        MessageTA.setVisible(true);
        
        
    }//GEN-LAST:event_MailTableMouseClicked

    private void DownloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DownloadButtonActionPerformed
        // TODO add your handling code here:
        Message msgs[];
        
        synchronized(thread)
        {
            msgs = thread.getMessages();
            
            if(msgs != null)
            {
                
                if(SelectedMessage != null)
                {
                    
                    try
                    {
                        if(SelectedMessage.getContent() instanceof Multipart)
                        {
                            Multipart mp = (Multipart) SelectedMessage.getContent();
                            for(int i = 0; i < mp.getCount(); i+=1){

                                try {
                                    
                                        if(mp.getBodyPart(i).getDisposition() != null && mp.getBodyPart(i).getDisposition().equalsIgnoreCase(Part.ATTACHMENT))
                                        {
                                            //MessageTA.setText((String)mp.getBodyPart(i).getContent());
                                            JFrame parentFrame = new JFrame();
                                            JFileChooser filech = new JFileChooser();
                                            filech.setDialogTitle("Sauvegarder où?");
                                            
                                            filech.setSelectedFile(new File(mp.getBodyPart(i).getFileName()));
                                            int userSelection = filech.showSaveDialog(parentFrame);
                                            if(userSelection == filech.APPROVE_OPTION) {
                                                //Save here filech.getSelectedFile();
                                                InputStream is = mp.getBodyPart(i).getInputStream();
                                                
                                                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                                                
                                                int c;
                                                while((c = is.read()) != -1) baos.write(c);
                                                
                                                baos.flush();
                                                
                                                FileOutputStream fos = new FileOutputStream(filech.getSelectedFile());
                                                
                                                baos.writeTo(fos);
                                                
                                                fos.close();

                                            }
                                        }
                                } catch (MessagingException ex) {
                                    Logger.getLogger(MailClient.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(MailClient.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (MessagingException ex) {
                        Logger.getLogger(MailClient.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
        
        
        MessageTA.setVisible(true);
    }//GEN-LAST:event_DownloadButtonActionPerformed

    private void RefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshButtonActionPerformed
        try {
            // TODO add your handling code here:
            synchronized(thread)
            {
                thread.Stop();
                thread.interrupt();
            }
        } catch (MessagingException ex) {
            Logger.getLogger(MailClient.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        thread = new ThreadReception(selectedAccount, MailTable);
        
        thread.start();
    }//GEN-LAST:event_RefreshButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        synchronized(thread)
        {
            if(SelectedMessage != null)
                try {
                    SelectedMessage.setFlag(Flags.Flag.DELETED, true);
            } catch (MessagingException ex) {
                Logger.getLogger(MailClient.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        RefreshButtonActionPerformed(null);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void MailTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MailTableKeyReleased
        // TODO add your handling code here:
        MailTableMouseClicked(null);
    }//GEN-LAST:event_MailTableKeyReleased

    
    private void DeserializeFile(String name) throws FileNotFoundException, IOException, ClassNotFoundException {
        Account compte;
        FileInputStream file = new FileInputStream("Data" + System.getProperty("file.separator") + name);
        ObjectInputStream ois = new ObjectInputStream(file);
        
        compte = (Account)ois.readObject();
        
        comptes.add(compte);
        
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MailClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MailClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MailClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MailClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MailClient().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComptesCB;
    private javax.swing.JButton DownloadButton;
    private javax.swing.JTable MailTable;
    private javax.swing.JTextArea MessageTA;
    private javax.swing.JButton NewAccountButton;
    private javax.swing.JButton RefreshButton;
    private javax.swing.JButton WriteButton;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
